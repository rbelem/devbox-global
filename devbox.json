{
  "packages": [
    "fzf@latest",
    "starship@latest",
    "ripgrep@latest",
    "gh@latest",
    "zoxide@latest",
    "tmux@latest",
    "go@latest",
    "cargo@latest",
    "wl-clipboard@latest",
    "statix@latest",
    "path:devbox.d/neovim",
    "git-credential-oauth@latest",
    "git-credential-manager@latest",
    "gitFull@latest",
    "delta@latest",
    "luarocks@latest",
    "ghq@latest",
    "tree@latest",
    "difftastic@latest",
    "tig@latest",
    "tree-sitter@latest",
    "chezmoi@latest",
    "bitwarden-cli@latest",
    "atuin@latest",
    "nerd-fonts.hack@latest",
    "nerd-fonts.noto@latest",
    "nerd-fonts.fira-code@latest",
    "fd@latest",
    "libuuid@latest",
    "dconf@latest",
    "jq@latest",
    "podman@latest",
    "python312@latest",
    "jdk21@latest",
    "unzip@latest",
    "p7zip@latest",
    "evtest@latest",
    "gcc@latest",
    "blesh@latest",
  ],
  "env": {
    "EDITOR": "vi",
    "VISUAL": "vi",
    "NIX_CONFIG": "experimental-features = nix-command flakes",
  },
  "shell": {
    "init_hook": [
      "[ ! -t 0 ] || [ -z \"$PS1\" ] && return",
      "[[ $- == *i* ]] && source $(blesh-share)/ble.sh --noattach",
      "[[ ! ${BLE_VERSION-} ]] || eval \"$(devbox global run setup-blesh)\"",
      // nix-ld must be enabled on the nix host
      // "programs.nix-ld.enable = true;"
      "uname -v | grep -q 'NixOS' && export NIX_LD=$(nix eval --impure --raw --expr '",
      "let",
      "  pkgs = import <nixpkgs> {};",
      "  NIX_LD = pkgs.lib.fileContents \"${pkgs.stdenv.cc}/nix-support/dynamic-linker\";",
      "in NIX_LD",
      "')",
      "command -v starship >/dev/null 2>&1 && eval \"$(starship init bash --print-full-init)\"",
      "command -v zoxide >/dev/null 2>&1 && eval \"$(zoxide init bash)\" && alias cd='z'",
      "export SUDO_EDITOR=$DEVBOX_PACKAGES_DIR/bin/nvim",
      "set -o vi",
      "command -v atuin >/dev/null 2>&1 && eval \"$(atuin init --disable-up-arrow bash)\"",
      // Load bash-completion
      "for f in \"$DEVBOX_PACKAGES_DIR/share/bash-completion/completions/\"*; do",
      "  [ $(basename $f) = Makemodule.am ] && continue",
      "  source \"$f\"",
      "done",
      "[[ ! ${BLE_VERSION-} ]] || ble-attach",
    ],
    "scripts": {
      "config-edit": [
        "$EDITOR $(devbox global path)/devbox.json",
      ],
      "config-pull": [
        "devbox global pull https://github.com/rbelem/devbox-global.git",
      ],
      "config-push": [
        "devbox global push https://github.com/rbelem/devbox-global.git",
      ],
      "first-install": [
        "devbox global run setup-git",
        "devbox global run setup-tmux",
        "devbox global run setup-nerd-fonts",
        "devbox global run setup-themes",
        "devbox global run setup-neovim",
      ],
      "setup-nerd-fonts": [
        "PREFIX=$(nix path-info $(devbox global path)/devbox.d/nerdfonts)",
        "NERDFONTS_DIR=$PREFIX/share/fonts/truetype/NerdFonts",
        "mkdir -p $HOME/.config/fontconfig/conf.d",
        "cat <<EOF > $HOME/.config/fontconfig/conf.d/10-nerdfonts.conf",
        "<?xml version='1.0'?>",
        "<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>",
        "<fontconfig>",
        "  <dir>$NERDFONTS_DIR</dir>",
        "</fontconfig>",
        "EOF",
        "fc-cache -fv",
      ],
      "setup-neovim": [
        "git clone https://github.com/rbelem/nvchad-custom $HOME/.config/nvim",
      ],
      "setup-blesh": [
        "cat <<EOF",
        "bleopt prompt_ps1_final=\"$(starship module time)$(starship module character)\"",
        "",
        "bleopt input_encoding=UTF-8",
        "bleopt prompt_eol_mark=",
        "bleopt filename_ls_colors=\"$LS_COLORS\"",
        "bleopt term_index_colors=auto",
        "",
        "ble-face -s varname_array             fg=silver,bold",
        "ble-face -s varname_empty             fg=white,bold",
        "ble-face -s varname_export            fg=silver,bold",
        "ble-face -s varname_expr              fg=silver,bold",
        "ble-face -s varname_hash              fg=silver,bold",
        "ble-face -s varname_number            fg=silver,bold",
        "ble-face -s varname_readonly          fg=silver,bold",
        "ble-face -s varname_transform         fg=silver,bold",
        "ble-face -s varname_unset             fg=white,bold",
        "",
        "ble-bind -m 'auto_complete' -f 'C-j' 'auto_complete/insert-on-end'",
        "",
        "ble-face -s auto_complete             fg=#6b7066,bg=#363646",
        "ble-face -s argument_option           fg=magenta",
        "",
        "ble-face -s region                    fg=smoke,bg=thunder",
        "ble-face -s region_insert             fg=silver",
        "ble-face -s region_match              fg=silver,bold",
        "ble-face -s region_target             fg=silver",
        "",
        "ble-face -s syntax_brace              fg=smoke",
        "ble-face -s syntax_command            fg=smoke",
        "ble-face -s syntax_comment            fg=silver",
        "ble-face -s syntax_default            fg=silver",
        "ble-face -s syntax_delimiter          fg=smoke",
        "ble-face -s syntax_document           fg=brown",
        "ble-face -s syntax_document_begin     fg=brown,bold",
        "ble-face -s syntax_error              fg=white,italic,strike",
        "ble-face -s syntax_escape             fg=brown",
        "ble-face -s syntax_expr               fg=brown",
        "ble-face -s syntax_function_name      fg=yellow",
        "ble-face -s syntax_glob               fg=brown",
        "ble-face -s syntax_history_expansion  fg=silver",
        "ble-face -s syntax_param_expansion    fg=olive,bold",
        "ble-face -s syntax_quotation          fg=brown",
        "ble-face -s syntax_quoted             fg=silver",
        "ble-face -s syntax_tilde              fg=smoke",
        "ble-face -s syntax_varname            fg=silver,bold",
        "",
        "ble-face -s filename_block            fg=yellow,bg=black,bold",
        "ble-face -s filename_character        fg=yellow,bg=black,bold",
        "ble-face -s filename_directory        fg=navy,bold",
        "ble-face -s filename_directory_sticky fg=black,bg=lime",
        "ble-face -s filename_executable       fg=lime,bold",
        "ble-face -s filename_link             fg=teal,bold",
        "ble-face -s filename_ls_colors        none",
        "ble-face -s filename_orphan           fg=white,bg=red,bold,blink",
        "ble-face -s filename_other            fg=white",
        "ble-face -s filename_pipe             fg=yellow",
        "ble-face -s filename_setgid           fg=black,bg=yellow",
        "ble-face -s filename_setuid           fg=silver,bg=red",
        "ble-face -s filename_socket           fg=magenta,bold",
        "ble-face -s filename_url              fg=silver,underline",
        "ble-face -s filename_warning          fg=silver,bg=wine,bold,blink",
        "",
        "ble-face -s command_alias             fg=teal,italic",
        "ble-face -s command_builtin           fg=brown",
        "ble-face -s command_builtin_dot       fg=brown,bold",
        "ble-face -s command_directory         fg=navy,bold",
        "ble-face -s command_file              fg=lime,bold",
        "ble-face -s command_function          fg=yellow",
        "ble-face -s command_jobs              fg=red,bold",
        "ble-face -s command_keyword           fg=magenta",
        "",
        "ble-face -s cmdinfo_cd_cdpath         fg=silver",
        "ble-face -s disabled                  fg=black",
        "ble-face -s overwrite_mode            fg=black",
        "ble-face -s prompt_status_line        fg=silver",
        "",
        "ble-face -s vbell                     reverse",
        "ble-face -s vbell_erase               invis",
        "ble-face -s vbell_flash               fg=yellow,reverse",
        "",
        "ble-import vim-airline",
        "bleopt vim_airline_theme=dark",
        "bleopt vim_airline_section_a='\\e[1m\\q{lib/vim-airline/mode}'",
        "bleopt vim_airline_section_b='\\w'",
        "bleopt vim_airline_section_c=",
        "bleopt vim_airline_section_x=",
        "bleopt vim_airline_section_y=",
        "bleopt vim_airline_section_z=",
        "bleopt vim_airline_left_sep=",
        "bleopt vim_airline_left_alt_sep=",
        "bleopt vim_airline_right_sep=",
        "bleopt vim_airline_right_alt_sep=",
        "bleopt vim_airline_symbol_branch=$'îœ¥ '",
        "bleopt vim_airline_symbol_dirty=' +'",
        "ble-face -s vim_airline_a_normal               fg=silver,bg=none,bold",
        "ble-face -s vim_airline_a_insert               fg=purple,bg=none,bold",
        "ble-face -s vim_airline_a_replace              fg=olive,bg=none,bold",
        "ble-face -s vim_airline_a_visual               fg=brown,bg=none,bold",
        "ble-face -s vim_airline_a_commandline          fg=purple,bg=none,bold",
        "ble-face -s vim_airline_a_inactive             fg=white,bg=none,bold",
        "",
        "$(for mode in normal insert replace visual commandline inactive; do",
        "    echo \"ble-face -s vim_airline_b_\"$mode\"           fg=teal,bg=none\"",
        "    echo \"ble-face -s vim_airline_c_\"$mode\"           fg=navy,bg=none,bold\"",
        "    echo \"ble-face -s vim_airline_x_\"$mode\"           fg=silver,bg=none\"",
        "    echo \"ble-face -s vim_airline_y_\"$mode\"           fg=silver,bg=none\"",
        "    echo \"ble-face -s vim_airline_z_\"$mode\"           ref:vim_airline_a_\"$mode\"\"",
        "    echo \"ble-face -s vim_airline_error_\"$mode\"       fg=silver,bg=brown,bold,blink\"",
        "    echo \"ble-face -s vim_airline_term_\"$mode\"        bg=none\"",
        "    echo \"ble-face -s vim_airline_warning_\"$mode\"     bg=none\"",
        "done)",
        "",
        "# Vim mode cursor shape settings",
        "ble-bind -m vi_cmap --cursor 0",
        "ble-bind -m vi_imap --cursor 1",
        "ble-bind -m vi_nmap --cursor 2",
        "ble-bind -m vi_omap --cursor 4",
        "ble-bind -m vi_smap --cursor 2",
        "ble-bind -m vi_xmap --cursor 2",
        "EOF",
      ],
      "setup-devbox": [
        "mkdir -p $HOME/.bashrc.d",
        "cat <<EOF > $HOME/.bashrc.d/90-devbox.sh",
        "[ ! -t 0 ] || [ -z \"\\$PS1\" ] && return",
        "source <(devbox completion bash)",
        "source <(devbox global shellenv --init-hook)",
        "EOF",
      ],
      "setup-devbox-bashrc": [
        "cat <<EOF >> $HOME/.bashrc",
        "",
        "# User specific aliases and functions",
        "if [ -d ~/.bashrc.d ]; then",
        "  for rc in ~/.bashrc.d/*; do",
        "    if [ -f \"\\$rc\" ]; then",
        "      . \"\\$rc\"",
        "    fi",
        "  done",
        "fi",
        "",
        "unset rc",
        "EOF",
      ],
      "setup-flatpak": [
        "flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo",
        "flatpak remote-add --if-not-exists --user flathub-beta https://dl.flathub.org/beta-repo/flathub-beta.flatpakrepo",
        "rm -rf $HOME/.local/share/fonts",
        "uname -v | grep -q 'NixOS' \\",
        "  && ln -sf /run/current-system/sw/share/X11/fonts $HOME/.local/share/fonts \\",
        "  || ln -sf /usr/share/fonts/X11 $HOME/.local/share/fonts",
        "flatpak --user override --filesystem=$HOME/.local/share/fonts",
        "mkdir -p $HOME/.icons",
        "mkdir -p $HOME/.local/share/icons",
        "ln -sf $(nix eval --raw nixpkgs#breeze-icons.outPath)/share/icons/breeze $HOME/.icons/default",
        "flatpak --user override --filesystem=$HOME/.icons",
        "ln -sf $(nix eval --raw nixpkgs#breeze-icons.outPath)/share/icons/breeze $HOME/.local/share/icons/default",
        "flatpak --user override --filesystem=$HOME/.local/share/icons",
      ],
      "setup-git": [
        "git config --global ghq.root $HOME/Workspace",
        "for gitconfig in $(git config --get-regexp includeif.gitdir | awk '{print $1}'); do",
        "  dirname=${gitconfig%.path}",
        "  git config --global --remove-section $dirname",
        "done",
        "sections=\"",
        "  alias",
        "  core",
        "  credential.https://dev.azure.com",
        "  credential",
        "  delta",
        "  difftool.difftastic",
        "  diff",
        "  http",
        "  http.https://*.*.local",
        "  include",
        "  init",
        "  interactive",
        "  merge",
        "\"",
        "for section in $sections; do",
        "  git config --global --get-regexp '^$section' > /dev/null 2>&1 \\",
        "    && git config --global --remove-section $section",
        "done",
        "git config --global user.name 'Rodrigo Belem'",
        "git config --global user.email rodrigo.belem@gmail.com",
        "for gitconfig in $(find $(ghq root) -maxdepth 3 -name .gitconfig); do",
        "  dirname=$(dirname $gitconfig)",
        "  dirname=${dirname%/}/",
        "  git config --global includeif.gitdir:${dirname}.path \"$gitconfig\"",
        "done",
        "git config --global alias.br branch",
        "git config --global alias.ci commit",
        "git config --global alias.co checkout",
        "git config --global branch.autosetupmerge always",
        "git config --global branch.autosetuprebase always",
        "git config --global commit.verbose true",
        "git config --global init.defaultBranch main",
        "git config --global --bool http.'https://*.*.local'.sslverify false",
        "git config --global --add credential.helper cache",
        "git config --global --add credential.helper libsecret",
        "git config --global credential.cacheOptions '--timeout=7200'",
        "git config --global credential.credentialStore secretservice",
        "git config --global --add credential.https://bitbucket.org.helper cache",
        "git config --global --add credential.https://bitbucket.org.helper manager",
        "git config --global --add credential.https://dev.azure.com.helper cache",
        "git config --global --add credential.https://dev.azure.com.helper manager",
        "git config --global --add credential.https://github.com.helper cache",
        "git config --global --add credential.https://github.com.helper oauth",
        "git config --global --add credential.https://gitlab.com.helper cache",
        "git config --global --add credential.https://gitlab.com.helper oauth",
        "git config --global credential.https://dev.azure.com.useHttpPath true",
        "git config --global core.pager 'less -RF'",
        "git config --global pager.delta delta",
        "git config --global alias.delta diff",
        "git config --global interactive.diffFilter 'delta --color-only'",
        "mkdir -p $HOME/.local/share/delta",
        "curl -sLJ https://github.com/dandavison/delta/raw/main/themes.gitconfig \\",
        "  -o $HOME/.local/share/delta/themes.gitconfig",
        "git config --global include.path $HOME/.local/share/delta/themes.gitconfig",
        "git config --global diff.colorMoved default",
        "git config --global diff.guitool meld",
        "git config --global diff.tool difftastic",
        "git config --global difftool.difftastic.cmd 'difft \"$LOCAL\" \"$REMOTE\"'",
        "git config --global delta.features calochortus-lyallii",
        "git config --global delta.line-numbers-minus-style 'bold \"#b10036\"'",
        "git config --global delta.line-numbers-plus-style 'bold \"#00b136\"'",
        "git config --global delta.max-line-length 1024",
        "git config --global delta.navigate true",
        "git config --global delta.pager 'less -RF'",
        "git config --global delta.side-by-side true",
        "git config --global delta.tabs 2",
        "git config --global delta.true-color always",
        "git config --global merge.conflictstyle diff3",
        "git config --global merge.guitool meld",
        "git config --global merge.tool vimdiff",
        "git config --global mergetool.vimdiff.cmd \"nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'\"",
      ],
      "setup-podman": [
        "mkdir -p $HOME/.config/containers",
        "cat <<EOF > $HOME/.config/containers/policy.json",
        "{",
        "  \"default\": [{\"type\": \"insecureAcceptAnything\"}],",
        "  \"transports\": {\"docker-daemon\": {\"\": [{\"type\":\"insecureAcceptAnything\"}]}}",
        "}",
        "EOF",
      ],
      "setup-themes": [
        "ghq get https://github.com/Gogh-Co/Gogh.git",
        "[ $XDG_SESSION_DESKTOP = KDE ] && export TERMINAL=konsole",
        "[ $XDG_CURRENT_DESKTOP = ubuntu:GNOME ] && export TERMINAL=gnome-terminal",
        "$(ghq root)/github.com/Gogh-Co/Gogh/installs/kanagawa.sh",
      ],
      "setup-tmux": [
        "[ -d $HOME/.tmux ] || git clone https://github.com/gpakosz/.tmux $HOME/.tmux",
        "ln -sf $HOME/.tmux/.tmux.conf $HOME/.tmux.conf",
        "ln -sf $(devbox global path)/dotfiles/.tmux.conf.local $HOME/.tmux.conf.local",
        "mkdir -p $HOME/.local/bin",
        "cat <<EOF > $HOME/.local/bin/t",
        "#!/usr/bin/env sh",
        "ARG=$(readlink -f $@)",
        "cd $HOME/.tmux/plugins/tmux-session-wizard/bin",
        "./t $ARG",
        "EOF",
        "chmod u+x $HOME/.local/bin/t",
      ],
      "setup-kde-secrets-service": [
        "mkdir -p $HOME/.local/share/dbus-1/services",
        "cat <<EOF > $HOME/.local/share/dbus-1/services/org.freedesktop.secrets.service",
        "[D-BUS Service]",
        "Name=org.freedesktop.secrets",
        "Exec=/usr/bin/kwalletd5",
        "EOF",
      ],
    },
  },
}
